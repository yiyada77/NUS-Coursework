function net =faceCNN_init()
    rng('default');
    rng(0);

    f=1/100 ;
    net.layers = {} ;
    net.layers{end+1} = struct('type', 'conv', ...
        'weights', {{f*randn(5,5,1,20, 'single'), zeros(1, 20, 'single')}}, ...
        'stride', 1, ...
        'pad', 0) ;
    net.layers{end+1} = struct('type', 'pool', ...
        'method', 'max', ...
        'pool', [2 2], ...
        'stride', 2, ...
        'pad', 0) ;
    net.layers{end+1} = struct('type', 'conv', ...
        'weights', {{f*randn(5,5,20,50, 'single'),zeros(1,50,'single')}}, ...
        'stride', 1, ...
        'pad', 0) ;
    net.layers{end+1} = struct('type', 'pool', ...
        'method', 'max', ...
        'pool', [2 2], ...
        'stride', 2, ...
        'pad', 0) ;
    net.layers{end+1} = struct('type', 'conv', ...
        'weights', {{f*randn(5,5,50,500, 'single'),  zeros(1,500,'single')}}, ...
        'stride', 1, ...
        'pad', 0) ;
    net.layers{end+1} = struct('type', 'relu') ;
    net.layers{end+1} = struct('type', 'conv', ...
        'weights', {{f*randn(1,1,500,21, 'single'), zeros(1,21,'single')}}, ...
        'stride', 1, ...
        'pad', 0) ;
    net.layers{end+1} = struct('type', 'softmaxloss') ;

    net = insertBnorm(net, 1) ;
    net = insertBnorm(net, 4) ;
    net = insertBnorm(net, 7) ;
    % Meta parameters
    net.meta.inputSize = [32 32 1] ;
    net.meta.trainOpts.learningRate = logspace(-2, -5, 100);
    net.meta.trainOpts.numEpochs = 15 ;
    net.meta.trainOpts.batchSize = 40 ;
    % Fill in defaul values
    net = vl_simplenn_tidy(net) ;
end

function net = insertBnorm(net, l)
    assert(isfield(net.layers{l}, 'weights'));
    ndim = size(net.layers{l}.weights{1}, 4);
    layer = struct('type', 'bnorm', ...
        'weights', {{ones(ndim, 1, 'single'), zeros(ndim, 1, 'single')}}, ...
        'learningRate', [1 1 0.05], ...
        'weightDecay', [0 0]) ;
    net.layers{l}.weights{2} = [] ;  % eliminate bias in previous conv layer
    net.layers = horzcat(net.layers(1:l), layer, net.layers(l+1:end)) ;
end